import telebot
import responses
import keyboards
import commands
import logging
import datetime
import os

bot = telebot.AsyncTeleBot(os.environ["TOKEN"])
logging.basicConfig(filename='messages.log')

@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç!\n–Ø –ë–æ—Ç –ü–∞–ª—ë–Ω—ã—á!\n–ö–∏—Ä–∏–ª–ª —Ä–µ—à–∏–ª –Ω–µ —É—Ç—Ä–∂–¥–∞—Ç—å —Å–µ–±—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –¥–æ–≤–µ—Ä–∏–ª —ç—Ç—É –≤—ã—Å–æ–∫—É—é –º–∏—Å—Å–∏—é!\n–ß—Ç–æ –∂, –Ω–∞–¥–µ—é—Å—å, —è —Å—É–º–µ—é –æ–ø—Ä–∞–≤–¥–∞—Ç—å –í–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—èüòè\n–ü–æ–∂–µ–ª–∞–π—Ç–µ –º–Ω–µ —É–¥–∞—á–∏!üôè", reply_markup=keyboards.start_markup)

@bot.message_handler(commands=['help'])
def handle_help(message):
    bot.send_message(message.from_user.id,responses.responses["–ø–æ–º–æ—â—å"]["reply"])

@bot.message_handler(commands=['about'])
def handle_about(message):
    bot.send_message(message.from_user.id,responses.responses["–æ –±–æ—Ç–µ"]["reply"])

def send_message(message, response):
    bot.send_message(message.chat.id,response["reply"],reply_markup=response["markup"])

def handle_command(message,messagetext):
    if messagetext == "–ø–æ–º–æ—â—å":
        handle_help(message)
    elif messagetext == "–æ –±–æ—Ç–µ":
        handle_about(message)
    elif messagetext == "–Ω–∞–∑–∞–¥":
        handle_back(message)
    else:
        send_message(message,responses.responses[messagetext])


@bot.message_handler(content_types=['text'])
def handle_message(message):
    print(datetime.datetime.now())
    print(message.json)
    logging.debug(datetime.datetime.now())
    logging.debug(message.json)
    messagetext = message.text.lower()
    if messagetext in responses.responses.keys():
        print("–ö–æ–º–∞–Ω–¥–∞: " + messagetext)
        handle_command(message,messagetext)
    else:
        print("–¢–µ–∫—Å—Ç: " + messagetext)
        reply = commands.parse_text(messagetext)
        if reply is None:
            reply = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –Ω–µ –æ–±–ª–∞–¥–∞—é –ø–æ–¥–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!\n–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ!\n–í–∞—à –≤–æ–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥, –∏ —Å–∫–æ—Ä–æ —è —É–∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ!"
            logging.info(messagetext)
        print("–û—Ç–≤–µ—Ç: " + reply)
        bot.send_message(message.chat.id, reply)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        print(datetime.datetime.now())
        print(call.message.json)
        logging.debug(datetime.datetime.now())
        logging.debug(call.message.json)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=responses.responses[call.data]["reply"],reply_markup=responses.responses[call.data]["markup"])
            #bot.send_message(chat_id=call.message.chat.id, text="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –∏–∑ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏")

if __name__ == '__main__':
    try:
        bot.polling(none_stop=True)
    except Exception as ex:
        print(datetime.datetime.now())
        print(ex.args)
        logging.critical(datetime.datetime.now())
        logging.critical(ex.args)

#bot.polling(none_stop=True,interval=0)